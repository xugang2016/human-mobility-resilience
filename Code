#install.packages("ggplot2")
#install.packages("reshape2")
#install.packages("lubridate")
#install.packages("dplyr")
#install.packages("GGally")
#install.packages("ggpubr")
#install.packages("fpc")

library(ggplot2)
library(reshape2)
library(lubridate)
library(dplyr)
library(GGally)
library(ggpubr)
library(fpc)

#setwd ("C:/Users/DELL/Desktop/Mobility/") 
a <- list.files("2020")
dir <- paste("./2020/",a,sep="")
n <- length(dir)

# Define date range for analysis
date1 <- as.POSIXct(paste("2020-2-15"))
date2 <- as.POSIXct(paste("2020-8-15"))
int <- interval(date1,date2)
date <- date2 - date1

# Create empty data frames to store results
dataAll <- data.frame(matrix(ncol=8,nrow=0))
colnames(dataAll) <- c("Country","Date","RetailAndRecreation","GroceryAndPharmacy","Transit","Park","Workplace","Residential")
dataAverage <- data.frame(matrix(ncol=8,nrow=0))
colnames(dataAverage) <- c("Country","Date","RetailAndRecreation","GroceryAndPharmacy","Transit","Park","Workplace","Residential")
dataResult <- data.frame(matrix(ncol=16,nrow=0))
colnames(dataResult) <- c("Country","Country_code","Location","Begin","Lowest","End","Ts","Tc","Ms","Mc","Vs","Vc","Is","Ic","DIs","DIc")

location <- c("Retail and Recreation","Grocery and Pharmacy","Park","Transit station","Workplace","Residential")

# Loop through each file to process data
for(i in 1:n){
  countryCode <- unlist(strsplit(a[i],split="_"))[2]
  mydata <- read.csv(file=dir[i],header=TRUE,sep=",",na.strings="",encoding='UTF-8')

  if(countryCode == "CI"){
    countryName <- "Côte d'Ivoire"
  }else if(countryCode == "RE"){
    countryName <- "Réunion"
  }else{
    countryName <- mydata[1,2]
  }
  
  dataCountry <- mydata[which((is.na(mydata$sub_region_1)|is.null(mydata$sub_region_1))&(is.na(mydata$metro_area)|is.null(mydata$metro_area))&(is.na(mydata$sub_region_2)|is.null(mydata$sub_region_2))),]
  dataCountry$date <- ymd(dataCountry$date)
  dataCountry <- dataCountry[dataCountry$date %within% int,c(2,9:ncol(dataCountry))]
  dataCountry_stl <- dataCountry
  
  for(j in 3:8)
  {
    timeserie <- ts(dataCountry[,j],frequency=7)

    # Check for NA values in the time series
    if(sum(is.na(timeserie))>0){
      dataCountry_stl[,j] <- rep(NA,date+1)
      next
    }

    # Perform STL decomposition
    result <- stl(timeserie,"periodic",robust=T)
    dataCountry_stl[,j] <- as.data.frame(result$time.series)$trend

    dataResult[6*(i-1)+j-2,]$Country <- countryName
    dataResult[6*(i-1)+j-2,]$Country_code <- countryCode
    dataResult[6*(i-1)+j-2,]$Location <- location[j-2]
    dataResult[6*(i-1)+j-2,]$Lowest <- which.min(dataCountry_stl[1:107,j])
    dataResult[6*(i-1)+j-2,]$Begin <- which.max(dataCountry_stl[1:dataResult[6*(i-1)+j-2,]$Lowest,j])
    dataResult[6*(i-1)+j-2,]$End <- which.max(dataCountry_stl[dataResult[6*(i-1)+j-2,]$Lowest:date,j])+dataResult[6*(i-1)+j-2,]$Lowest-1
    
    if(j == 8){
      dataResult[6*(i-1)+j-2,]$Lowest <- which.max(dataCountry_stl[1:107,j])
      dataResult[6*(i-1)+j-2,]$Begin <- which.min(dataCountry_stl[1:dataResult[6*(i-1)+j-2,]$Lowest,j])
      dataResult[6*(i-1)+j-2,]$End <- which.min(dataCountry_stl[dataResult[6*(i-1)+j-2,]$Lowest:date,j])+dataResult[6*(i-1)+j-2,]$Lowest-1
    }

    dataResult[6*(i-1)+j-2,]$Ts <- dataResult[6*(i-1)+j-2,]$Lowest-dataResult[6*(i-1)+j-2,]$Begin
    dataResult[6*(i-1)+j-2,]$Tc <- dataResult[6*(i-1)+j-2,]$End-dataResult[6*(i-1)+j-2,]$Lowest
    dataResult[6*(i-1)+j-2,]$Ms <- abs(dataCountry_stl[dataResult[6*(i-1)+j-2,]$Begin,j]-dataCountry_stl[dataResult[6*(i-1)+j-2,]$Lowest,j])
    dataResult[6*(i-1)+j-2,]$Mc <- abs(dataCountry_stl[dataResult[6*(i-1)+j-2,]$End,j]-dataCountry_stl[dataResult[6*(i-1)+j-2,]$Lowest,j])
    dataResult[6*(i-1)+j-2,]$Vs <- dataResult[6*(i-1)+j-2,]$Ms/(dataResult[6*(i-1)+j-2,]$Lowest-dataResult[6*(i-1)+j-2,]$Begin)
    dataResult[6*(i-1)+j-2,]$Vc <- dataResult[6*(i-1)+j-2,]$Mc/(dataResult[6*(i-1)+j-2,]$End-dataResult[6*(i-1)+j-2,]$Lowest)
    dataResult[6*(i-1)+j-2,]$Is <- sum(abs(dataCountry_stl[(dataResult[6*(i-1)+j-2,]$Begin):(dataResult[6*(i-1)+j-2,]$Lowest),j]))
    dataResult[6*(i-1)+j-2,]$Ic <- sum(abs(dataCountry_stl[(dataResult[6*(i-1)+j-2,]$Lowest):(dataResult[6*(i-1)+j-2,]$End),j]))
    dataResult[6*(i-1)+j-2,]$DIs <- dataResult[6*(i-1)+j-2,]$Is/(dataResult[6*(i-1)+j-2,]$Lowest-dataResult[6*(i-1)+j-2,]$Begin)
    dataResult[6*(i-1)+j-2,]$DIc <- dataResult[6*(i-1)+j-2,]$Ic/(dataResult[6*(i-1)+j-2,]$End-dataResult[6*(i-1)+j-2,]$Lowest)
  }
  
  # Set column names for the data frame
  colnames(dataCountry) <- c("Country","Date","Retail and Recreation","Grocery and Pharmacy","Park","Transit station","Workplace","Residential")
  colnames(dataCountry_stl) <- c("Country","Date","Retail and Recreation","Grocery and Pharmacy","Park","Transit station","Workplace","Residential")  
  
  # Select specific columns for further analysis
  dataCountry <- dataCountry[, c("Country","Date","Retail and Recreation","Grocery and Pharmacy","Transit station","Park","Workplace","Residential")]
  dataCountry_stl <- dataCountry_stl[, c("Country","Date","Retail and Recreation","Grocery and Pharmacy","Transit station","Park","Workplace","Residential")]
  
  # Combine country data into a single data frame
  dataAll <- rbind(dataAll,dataCountry)
  dataAverage <- rbind(dataAverage,dataCountry_stl)
}

write.csv(dataResult,"各国指标.csv",na="")


# Reshape data to long format for visualization
dataLongall <- melt(dataAll,id=c("Country","Date"))
dataLong <- melt(dataAverage,id=c("Country","Date"))

continent <- read.csv(file="continent.csv",header=TRUE,sep=",",na.strings="",encoding='UTF-8')
colnames(continent) <- c("Country","Code","Continent")
dataLong <- left_join(dataLong,continent,by="Country")
dataLong$Continent[which(dataLong$Country == "Réunion")] <- "Africa"
dataLong$Continent[which(dataLong$Country == "Côte d'Ivoire")] <- "Africa"

# Aggregate data by variable and date
global <- aggregate(x=dataLong$value,
                    by=list(dataLong$variable,dataLong$Date),
                    FUN=mean,
                    na.rm=TRUE,
                    na.action=NULL)

p <- ggplot(data=dataLong,mapping=aes(x=Date,y=value,group=Country,color=Continent))+
  geom_line(alpha=0.4,size=0.4)+
  geom_hline(aes(yintercept=0),linetype="dashed",size=0.8,color="#696969")+
  stat_summary(aes(shape="mean",group=Continent),fun="mean",size=1.3,geom="line")+
  scale_color_manual(values=c("#8bdbe3","#FEA1B0","#96CCA8","#a378b5","#ff9d60","#FADA88"))+
  stat_summary(aes(shape="mean",group=1),fun="mean",size=1.5,geom="line",color="#4F4F4F")+
  scale_x_date(date_breaks="1 month",date_labels="%b")+
  facet_wrap(~variable,scales="free_y",ncol=2)+
  theme_bw()+
  guides(y=guide_axis(title="Google Mobility Index (%)"),
         color=guide_legend(nrow=1,byrow=TRUE))+
  theme(axis.text=element_text(size=12),
        axis.title.x=element_blank(),
        axis.title.y=element_text(size=14),
        panel.grid=element_blank(),
        strip.background=element_blank(),
        strip.text=element_text(size=12),
        legend.position='bottom',
        legend.direction='horizontal',
        legend.title=element_blank(),
        legend.key.size=unit(0.4,"inches"),
        legend.text=element_text(size=10))

tiff("Figure1a.tiff", width=8, height=7.5, units="in", res=600, compression="lzw")
print(p)
dev.off()


mydata.xu <- read.csv("GMI reduction in April 2020.csv", sep=",")

mydata.xu$Region <- factor(mydata.xu$Region, levels=c("Africa","Oceania","Asia","Europe","South America","North America")) 
p.work <- ggplot(mydata.xu, aes(Region, Workplace, fill=Region))+
  stat_boxplot(geom="errorbar", width=0.3,size=0.2)+
  geom_boxplot(outlier.size=1, outlier.shape=1, size=0.2)+
  scale_x_discrete(labels=c("Afr.","Oce.","Asia","Euro.","S.A.","N.A."))+
  scale_fill_manual(values=c("#8bdbe3","#ff9d60","#FEA1B0","#96CCA8","#FADA88","#a378b5"))+
  theme(panel.grid.major=element_blank(),
        panel.grid.minor=element_blank(),
        panel.background=element_rect(fill="white",color="black"))+
  labs(x=NULL,
       y="Workspaces GMI changes \nin April, 2020 (%)")+  
  theme(axis.text=element_text(size=7), 
        axis.title=element_text(size=7),
        axis.text.x=element_text(angle=-90))+
  theme (legend.position="none")

tiff(file="Figure1c.tiff", res=600, width=1000, height=830, compression="lzw")
p.work
dev.off()

mydata.xu$Region <- factor(mydata.xu$Region, levels=c("Europe","Oceania","Asia","Africa","North America","South America"))
p.resi <- ggplot(mydata.xu, aes(Region, Residential, fill=Region))+
  stat_boxplot(geom="errorbar", width=0.3,size=0.2)+
  geom_boxplot(outlier.size=1, outlier.shape=1, size=0.2)+
  scale_x_discrete(labels=c("Euro.","Oce.","Asia","Afr.","N.A.","S.A."))+
  scale_fill_manual(values=c("#96CCA8","#ff9d60","#FEA1B0","#8bdbe3","#a378b5","#FADA88"))+
  theme(panel.grid.major=element_blank(),
        panel.grid.minor=element_blank(),
        panel.background=element_rect(fill="white",color="black"))+
  labs(x=NULL,
       y="Residential GMI changes \nin April, 2020 (%)")+  
  theme(axis.text=element_text(size=7), 
        axis.title=element_text(size=7),
        axis.text.x=element_text(angle=-90))+
  theme (legend.position="none")

tiff(file="Figure1e.tiff", res=600, width=1000, height=830, compression="lzw")
p.resi 
dev.off()

# Combine workplace and residential plots into one figure
tiff(file="Changes in work+resi.tiff", res=600, width=1400, height=2000, compression="lzw")
ggarrange(p.work,p.resi,
          nrow=2,
          labels=c("c","e"), label.x=0.05)
dev.off()


# Filter out specific countries from data for Workplace analysis
dataAverage_wp <- dataAverage[-which(dataAverage$Country %in% c("Taiwan","Hong Kong","Réunion","Liechtenstein")),c(1,2,7)]
dataResult_wp <- dataResult[which(dataResult$Location=="Workplace"),]
dataResult_wp <- dataResult_wp[-which(dataResult_wp$Country %in% c("Taiwan","Hong Kong","Réunion","Liechtenstein")),]

p_period <- ggplot()+
  geom_line(data=dataAverage_wp,aes(x=Date,y=Workplace),lwd=0.6,na.rm=FALSE)+
  geom_rect(data=dataResult_wp,
            aes(xmin=ymd(days(Begin-1)+date1),xmax=ymd(days(Lowest-1)+date1),ymin=-Inf,ymax=Inf),
            fill="#FF3300",alpha=.2,na.rm=FALSE)+
  geom_rect(data=dataResult_wp,
            aes(xmin=ymd(days(Lowest-1)+date1),xmax=ymd(days(End-1)+date1),ymin=-Inf,ymax=Inf),
            fill="#6A0DAD",alpha=.2,na.rm=FALSE)+
  facet_wrap(~Country,drop=TRUE,ncol=7)+
  labs(y="Google Mobility Index in Workplace (%)")+
  scale_x_date(date_breaks="2 months",date_labels="%b")+
  theme_bw()+
  theme(strip.background=element_blank(),
        axis.text=element_text(size=6),
        axis.title=element_text(size=8),
        axis.title.x=element_blank(),
        strip.text.x=element_text(size=4.8,margin=margin(0,0,1,0,"pt")),
        panel.spacing.y=unit(1,"mm"),
        panel.grid.minor.y=element_blank())
        
tiff(file="FigureS4.tiff", res=600, width=3600, height=5200, compression="lzw")
p_period
dev.off()

# Filter out additional countries for Residential analysis
dataAverage_wp <- dataAverage[-which(dataAverage$Country %in% c("Taiwan","Hong Kong","Réunion","Liechtenstein","Antigua and Barbuda","Aruba","Barbados","Belize","Cape Verde","Guinea-Bissau","Luxembourg","Papua New Guinea")),c(1,2,8)]
dataResult_wp <- dataResult[which(dataResult$Location=="Residential"),]
dataResult_wp <- dataResult_wp[-which(dataResult_wp$Country %in% c("Taiwan","Hong Kong","Réunion","Liechtenstein","Antigua and Barbuda","Aruba","Barbados","Belize","Cape Verde","Guinea-Bissau","Luxembourg","Papua New Guinea")),]

p_period <- ggplot()+
  geom_line(data=dataAverage_wp,aes(x=Date,y=Residential),lwd=0.6,na.rm=FALSE)+
  geom_rect(data=dataResult_wp,
            aes(xmin=ymd(days(Begin-1)+date1),xmax=ymd(days(Lowest-1)+date1),ymin=-Inf,ymax=Inf),
            fill="#FF3300",alpha=.2,na.rm=FALSE)+
  geom_rect(data=dataResult_wp,
            aes(xmin=ymd(days(Lowest-1)+date1),xmax=ymd(days(End-1)+date1),ymin=-Inf,ymax=Inf),
            fill="#6A0DAD",alpha=.2,na.rm=FALSE)+
  facet_wrap(~Country,drop=TRUE,ncol=7)+
  labs(y="Google Mobility Index in Residential (%)")+
  scale_x_date(date_breaks="2 months",date_labels="%b")+
  theme_bw()+
  theme(strip.background=element_blank(),
        axis.text=element_text(size=6),
        axis.title=element_text(size=8),
        axis.title.x=element_blank(),
        strip.text.x=element_text(size=4.8,margin=margin(0,0,1,0,"pt")),
        panel.spacing.y=unit(1,"mm"),
        panel.grid.minor.y=element_blank())
        
tiff(file="FigureS5.tiff", res=600, width=3600, height=5200, compression="lzw")
p_period
dev.off()


# Set country and location for STL decomposition
Country_stl <- "United States"
Location_stl <- "Workplace"

# Create time series object and perform STL decomposition
timeserie_stl <- ts(dataAll[which(dataAll$Country == Country_stl),Location_stl],frequency=7)
result_stl <- stl(timeserie_stl,"periodic",robust=T)

stl_plot <- cbind(dataAll[which(dataAll$Country == Country_stl),Location_stl],
                  as.data.frame(result_stl$time.series))
stl_plot <- cbind(rep(1:nrow(stl_plot)),stl_plot)
colnames(stl_plot) <- c("date","Timeseris","Seasonal","Trend","Reminder")

stl_plot2 <- melt(as.data.frame(stl_plot),id=("date"))
stl_plot2$variable <- factor(stl_plot2$variable,levels=c("Timeseris","Seasonal","Trend","Reminder"))

variable_labbeller <- c("Timeseris"="Original Data (Workplace)","Seasonal"="Weekly Effect","Trend"="Modified Trend","Reminder"="Reminder Noise")
  
p_stl <- ggplot(data=stl_plot2)+
  geom_line(aes(x=date,y=value,color=variable),linewidth=0.7)+
  scale_color_manual(values=c("#545454","#A9A9A9","#545454","#A9A9A9"))+
  facet_wrap(variable~.,scales="free_y",nrow=4,labeller=as_labeller(variable_labbeller))+
  theme_bw()+
  labs(x="Day",y="Google Mobility Trend (%)")+
  theme(panel.grid=element_blank(),
        legend.position="none",
        strip.background=element_blank(),
        axis.text=element_text(size=7),
        axis.title=element_text(size=7.8),
        strip.text.x=element_text(size=7,margin=margin(1,0,1,0, "pt")))

tiff(file="FigureS1.tiff", res=600, width=1900, height=2400, compression="lzw")
p_stl
dev.off()


dataResult <- read.csv("各国指标.csv", header=TRUE, sep=",", na.strings="", encoding='UTF-8')

# Log-transform selected columns and handle zero values
dfR <- dataResult %>%
  mutate(across(c(Ts, Tc, Ms, Mc, Vs, Vc, Is, Ic, DIs, DIc), ~if_else(. == 0, NA_real_, log10(.))))

# Remove rows with NA values
dfR <- na.omit(dfR)

# Set factor levels for the Location column
dfR$Location <- factor(dfR$Location, levels=c("Retail and Recreation","Grocery and Pharmacy","Transit station","Park","Workplace","Residential"))

p1 <- ggplot(data=dfR,aes(x=DIs,y=DIc,color=Location))+
  geom_point(size=0.8,alpha=0.6,stroke=0)+
  geom_smooth(aes(group=1),method="lm",color="black",linewidth=0.5,fullrange=FALSE)+
  stat_cor(method="pearson",p.accuracy=0.001,size=1.5,
           aes(label=paste(after_stat(r.label),cut(after_stat(p),breaks=c(-Inf,0.0001,0.001,0.01,0.05,Inf),labels=c("'****'","'***'","'**'","'*'","'ns'")),sep="~")),
           position=position_nudge(y=-0.05))+
  theme_bw()+
  scale_color_manual(values=c("#ef476f","#f78c6b","#ffd166","#06d6a0","#118ab2","#073b4c"))+
  labs(x="Daily Integrative Resistance",
       y="Daily Integrative Recovery")+
  theme(panel.grid=element_blank())+
  theme(axis.text=element_text(size=6),
        axis.title=element_text(size=6),
        legend.position="none")

p2 <- ggplot(data=dfR,aes(x=Is,y=Ic,color=Location))+
  geom_point(size=0.8,alpha=0.6,stroke=0)+
  geom_smooth(aes(group=1),method="lm",color="black",linewidth=0.5,fullrange=FALSE)+
  stat_cor(method="pearson",p.accuracy=0.001,size=1.5,
           aes(label=paste(after_stat(r.label),cut(after_stat(p),breaks=c(-Inf,0.0001,0.001,0.01,0.05,Inf),labels=c("'****'","'***'","'**'","'*'","'ns'")),sep="~")),
           position=position_nudge(y=-0.05))+
  theme_bw()+
  scale_color_manual(values=c("#ef476f","#f78c6b","#ffd166","#06d6a0","#118ab2","#073b4c"))+
  labs(x="Integrative Resistance",
       y="Integrative Recovery")+
  theme(panel.grid=element_blank())+
  theme(axis.text=element_text(size=6),
        axis.title=element_text(size=6),
        legend.position="none")

p3 <- ggplot(data=dfR,aes(x=Vs,y=Vc,color=Location))+
  geom_point(size=0.8,alpha=0.6,stroke=0)+
  geom_smooth(aes(group=1),method="lm",color="black",linewidth=0.5,fullrange=FALSE)+
  stat_cor(method="pearson",p.accuracy=0.001,size=1.5,
           aes(label=paste(after_stat(r.label),cut(after_stat(p),breaks=c(-Inf,0.0001,0.001,0.01,0.05,Inf),labels=c("'****'","'***'","'**'","'*'","'ns'")),sep="~")),
           position=position_nudge(y=-0.05))+
  theme_bw()+
  scale_color_manual(values=c("#ef476f","#f78c6b","#ffd166","#06d6a0","#118ab2","#073b4c"))+
  labs(x="Speed of Resistance",
       y="Speed of Recovery")+
  theme(panel.grid=element_blank())+
  theme(axis.text=element_text(size=6),
        axis.title=element_text(size=6),
        legend.position="none")

p4 <- ggplot(data=dfR,aes(x=Ms,y=Mc,color=Location))+
  geom_point(size=0.8,alpha=0.6,stroke=0)+
  geom_smooth(aes(group=1),method="lm",color="black",linewidth=0.5,fullrange=FALSE)+
  stat_cor(method="pearson",p.accuracy=0.001,size=1.5,
           aes(label=paste(after_stat(r.label),cut(after_stat(p),breaks=c(-Inf,0.0001,0.001,0.01,0.05,Inf),labels=c("'****'","'***'","'**'","'*'","'ns'")),sep="~")),
           position=position_nudge(y=-0.05))+
  theme_bw()+
  scale_color_manual(values=c("#ef476f","#f78c6b","#ffd166","#06d6a0","#118ab2","#073b4c"))+
  labs(x="Magnitude of Resistance",
       y="Magnitude of Recovery")+
  theme(panel.grid=element_blank())+
  theme(axis.text=element_text(size=6),
        axis.title=element_text(size=6),
        legend.position="none")

p5 <- ggplot(data=dfR,aes(x=Ts,y=Tc,color=Location))+
  geom_point(size=0.8,alpha=0.6,stroke=0)+
  geom_smooth(aes(group=1),method="lm",color="black",linewidth=0.5,fullrange=FALSE)+
  stat_cor(method="pearson",p.accuracy=0.001,size=1.5,
           aes(label=paste(after_stat(r.label),cut(after_stat(p),breaks=c(-Inf,0.0001,0.001,0.01,0.05,Inf),labels=c("'****'","'***'","'**'","'*'","'ns'")),sep="~")),
           position=position_nudge(y=-0.7))+
  theme_bw()+
  scale_color_manual(values=c("#ef476f","#f78c6b","#ffd166","#06d6a0","#118ab2","#073b4c"))+
  labs(x="Duration of Resistance",
       y="Duration of Recovery")+
  theme(panel.grid=element_blank())+
  theme(axis.text=element_text(size=6),
        axis.title=element_text(size=6),
        legend.position="none")

p6 <- ggplot(data=dfR,aes(x=Ts,y=Tc,color=Location))+
  geom_point()+
  lims(x=c(0,0),y=c(0,0))+
  theme_void()+
  theme(legend.position=c(0.3,0.5),
        legend.key.size=unit(4,"mm"),
        legend.background=element_blank(),
        legend.text=element_text(size=6),
        legend.title=element_blank())+
  scale_color_manual(labels=c("Retail and Recreation","Grocery and Pharmacy","Transit station","Park","Workplace","Residential"),
                     values=c("#ef476f","#f78c6b","#ffd166","#06d6a0","#118ab2","#073b4c"))

# Combine plots into a single figure and save as TIFF
tiff(file="Figure4.tiff", res=600, width=3400, height=2000, compression="lzw")
ggarrange(p5,p4,p3,p2,p1,p6,
          ncol=3,nrow=2,
          labels=c("a","b","c","d","e"),
          label.x=0.015,label.y=1,
          font.label=list(size=10, color="black", face="bold", family=NULL),
          align="v")
dev.off()


dataResult <- read.csv("各国指标.csv", header=TRUE, sep=",", na.strings="", encoding='UTF-8')

df1 <- dataResult %>%
  mutate(across(c(Ts, Tc, Ms, Mc, Vs, Vc, Is, Ic, DIs, DIc), ~if_else(. == 0, NA_real_, log10(.))))

df1 <- na.omit(df1)

df1$Location <- factor(df1$Location, levels=c("Retail and Recreation","Grocery and Pharmacy","Transit station","Park","Workplace","Residential"))

COVID <- read.csv("WHO-COVID-19-global-data.csv", header=TRUE, sep=",", na.strings="", encoding='UTF-8')
population <- read.csv("Country-population.csv", header=TRUE, sep=",", na.strings="", encoding='UTF-8')
code <- read.csv("Country-code-2-and-3-letters.csv", header=TRUE, sep=",", na.strings="", encoding='UTF-8')

# Rename columns for clarity
colnames(population)[1] <- "Country"
colnames(code) <- c("Country","Country.Code","Country_code")

# Filter COVID data by date
date1 <- as.POSIXct(paste("2020-2-15"))
date2 <- as.POSIXct(paste("2021-01-01"))
int <- interval(date1,date2)
date <- date2 - date1
COVID$Date_reported <- ymd(COVID$Date_reported)
COVID <- COVID[COVID$Date_reported %within% int,]

# Calculate cumulative case rates
COVID_rate <- left_join(COVID, code, by="Country_code")
COVID_rate <- left_join(COVID_rate, population, by="Country.Code")
COVID_rate <- COVID_rate %>% mutate(Cumulative_cases_rate=log10(Cumulative_cases/Pop2020))
COVID_rate <- COVID_rate %>% mutate(Cumulative_deaths_rate=log10(Cumulative_deaths/Pop2020))

# Merge dataframes and reshape
df2 <- left_join(df1, COVID_rate, by="Country_code")
df2 <- df2[,c("Country.x.x","Location","Ts","Tc","Ms","Mc","Vs","Vc","Is","Ic","DIs","DIc","Date_reported","Cumulative_cases_rate","Cumulative_deaths_rate")]
df2 <- melt(df2,measure.vars=c("Ts","Tc","Ms","Mc","Vs","Vc","Is","Ic","DIs","DIc"))

# Rename factors for better understanding
df2$variable <- factor(df2$variable, levels = c("Ts","Tc","Ms","Mc","Vs","Vc","Is","Ic","DIs","DIc")) 
levels(df2$variable)[levels(df2$variable)=='Ts'] <- "Duration of Resistance"
levels(df2$variable)[levels(df2$variable)=='Tc'] <- "Duration of Recovery"
levels(df2$variable)[levels(df2$variable)=='Ms'] <- "Magnitude of Resistance"
levels(df2$variable)[levels(df2$variable)=='Mc'] <- "Magnitude of Recovery"
levels(df2$variable)[levels(df2$variable)=='Vs'] <- "Speed of Resistance"
levels(df2$variable)[levels(df2$variable)=='Vc'] <- "Speed of Recovery"
levels(df2$variable)[levels(df2$variable)=='Is'] <- "Integrative Resistance"
levels(df2$variable)[levels(df2$variable)=='Ic'] <- "Integrative Recovery"
levels(df2$variable)[levels(df2$variable)=='DIs'] <- "Daily Integrative Resistance"
levels(df2$variable)[levels(df2$variable)=='DIc'] <- "Daily Integrative Recovery"

# Filter for specific date and finite values
df3 <- df2 %>% filter(Date_reported == ymd("2020-12-31")) %>% filter(is.finite(Cumulative_cases_rate)) %>% filter(is.finite(Cumulative_deaths_rate))

pm <- ggplot(df3,aes(x=as.numeric(value),y=Cumulative_cases_rate,color=Location))+
  geom_smooth(method="lm",size=0.4,fullrange=FALSE)+
  stat_cor(method="pearson",inherit.aes=TRUE,label.x.npc=0.65,label.y=c(-1,-1.12,-1.24,-1.36,-1.48,-1.6),p.accuracy=0.001,size=1.5,
           aes(label=paste(after_stat(r.label),cut(after_stat(p),breaks=c(-Inf,0.0001,0.001,0.01,0.05,Inf),labels=c("'****'","'***'","'**'","'*'","'ns'")),sep="~")))+
  labs(y="Cumulative Cases Rate",x="")+
  facet_wrap(~variable,scales="free")+
  scale_color_manual(labels=c("Retail and Recreation","Grocery and Pharmacy","Transit station","Park","Workplace","Residential"),
                     values=c("#ef476f","#f78c6b","#ffd166","#06d6a0","#118ab2","#073b4c"))+
  scale_x_continuous(limits=c(0.8, NA))+
  guides(col=guide_legend(nrow=1))+
  theme_bw()+
  theme(
        plot.margin=unit(c(0.1,0.2,0.8,0.1),"cm"),
        panel.grid=element_blank(),
        strip.background=element_blank(),
        axis.text=element_text(size=6),
        axis.title=element_text(size=7.5),
        legend.position=c(0.5,-0.1),
        legend.background=element_blank(),
        legend.key.size=unit(4,'mm'),
        legend.text=element_text(size=6),
        legend.title=element_blank(),
        strip.text.x=element_text(size=6,margin=margin(1,0,1,0,"pt"),colour="white")
        )

tiff(file="Figure5_1231.tiff", res=600, width=3900, height=3000, compression="lzw")
pm
dev.off()


ddf <- df2 %>% group_by(Location,Date_reported,variable) %>% filter(is.finite(Cumulative_cases_rate)) %>%
  summarise(cor_cases=(cor.test(as.numeric(value),Cumulative_cases_rate,method="pearson",use="complete.obs"))$estimate,
            cor_cases_p=(cor.test(as.numeric(value),Cumulative_cases_rate,method="pearson",use="complete.obs")$p.value)) %>% filter(cor_cases_p < 0.05)

pccmbd <- ggplot(ddf,aes(x=Date_reported,y=cor_cases,color=Location))+
  geom_point(size=0.3)+
  expand_limits(y=c(-0.92,0.92))+
  facet_wrap(~variable)+
  scale_color_manual(labels=c("Retail and Recreation","Grocery and Pharmacy","Transit station","Park","Workplace","Residential"),
                     values=c("#ef476f","#f78c6b","#ffd166","#06d6a0","#118ab2","#073b4c"))+
  labs(y="Pearson's R (Morbidity)",x=NULL)+
  guides(col=guide_legend(nrow=1))+
  theme_bw()+
  theme(
        text=element_text(size=8),
        axis.text=element_text(size=6),
        axis.title=element_text(size=8),
        legend.text=element_text(size=6),
        strip.text.x=element_text(size=6,margin=margin(1,0,1,0,"pt")),
        legend.position="none",
        #legend.position="bottom"
        #legend.background=element_blank(),
        #legend.key.size=unit(4,'mm'),
        #legend.title=element_blank(),
        #legend.box.margin=margin(-7,0,0,0),
        #legend.margin=margin(0,0,0,0),
        strip.background=element_blank(),
        panel.spacing.y=unit(0.75,"lines"),
        panel.grid=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank()
        )

tiff(file="Figure5b.tiff", res=600, width=3600, height=1800, compression="lzw")
pccmbd
dev.off()


dddf <- df2 %>% group_by(Location,Date_reported,variable) %>% filter(is.finite(Cumulative_deaths_rate)) %>%
  summarise(cor_deaths=(cor.test(as.numeric(value),Cumulative_deaths_rate,method="pearson",use="complete.obs"))$estimate,
            cor_deaths_p=(cor.test(as.numeric(value),Cumulative_deaths_rate,method="pearson",use="complete.obs")$p.value)) %>% filter(cor_deaths_p < 0.05)

pccmtl <- ggplot(dddf,aes(x=Date_reported,y=cor_deaths,color=Location))+
  geom_point(size=0.3)+
  expand_limits(y=c(-0.92,0.92))+
  facet_wrap(~variable)+
  scale_color_manual(labels=c("Retail and Recreation","Grocery and Pharmacy","Transit station","Park","Workplace","Residential"),
                     values=c("#ef476f","#f78c6b","#ffd166","#06d6a0","#118ab2","#073b4c"))+
  labs(y="Pearson Correlation Coefficient",x="Date")+
  guides(col=guide_legend(nrow=1))+
  theme_bw()+
  theme(
        text=element_text(size=8),
        axis.text=element_text(size=6),
        axis.title=element_text(size=8),
        legend.text=element_text(size=6),
        strip.text.x=element_text(size=6,margin=margin(1,0,1,0,"pt")),
        legend.position="none",
        #legend.position="bottom"
        #legend.background=element_blank(),
        #legend.key.size=unit(4,'mm'),
        #legend.title=element_blank(),
        #legend.box.margin=margin(-7,0,0,0),
        #legend.margin=margin(0,0,0,0),
        strip.background=element_blank(),
        panel.spacing.y=unit(0.75,"lines"),
        panel.grid=element_blank(),
        axis.text.x=element_blank(),
        axis.ticks.x=element_blank()
        )

tiff(file="FigureS7.tiff", res=600, width=3600, height=1800, compression="lzw")
pccmtl
dev.off()
